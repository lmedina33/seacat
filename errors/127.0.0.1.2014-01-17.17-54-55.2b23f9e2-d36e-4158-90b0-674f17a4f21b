(dp1
S'output'
p2
S"<type 'exceptions.SyntaxError'> define_table argument is not a Field or Table: Leandro"
p3
sS'layer'
p4
S'/home/leo/Dropbox/web2py/applications/SEACAT_ingresos/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    #response.flash = T("Bienvenido al Sistema Escolar de Administraci\xc3\xb3n de Calificaciones y Acompa\xc3\xb1amiento Tutorial (SEACAT)")\n    if not auth.is_logged_in():\n        form = auth()\n    else:\n        ## If the user is successfully logged in we store the timestamp in the \'auth_user\' table.\n        db.auth_user[auth.user.id]=dict(last_login=request.now)\n        ## Then we redirect to the "Start Page"\n        redirect(URL(\'start\'))\n    #if form.accepts(request.vars, session):\n        #redirect(URL(\'start\'))\n    #elif form.errors:\n        #response.flash = \'Usuario/Contrase\xc3\xb1a incorrectos\'\n    #else:\n        #response.flash = \'Por favor, complete el formulario de inicio de sesi\xc3\xb3n o seleccione un bot\xc3\xb3n\'\n    return dict(message=T("Registration System"), form=form)\n\ndef info():\n    return dict(info=info)\n\n#@auth.requires_login()\n#def ingreso():\n#    auth.settings.actions_disabled = [ \'register\' ]\n#    form = auth.profile()\n#    return dict(ingreso=ingreso, form=form)\n\n@auth.requires_login()\ndef start():\n     #response.flash = T("Welcome back ") + auth.user.first_name + " " + auth.user.last_name + "!"\n     #response.flash = auth.user.id\n     return dict(start=start)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in \n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    auth.settings.actions_disabled = [ \'register\' ]\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\n@auth.requires_membership(\'root\')\ndef admin_users():\n    grid = SQLFORM.smartgrid(db.auth_user,\n                             fields=[db.auth_user.id,\n                                     db.auth_user.gender,\n                                     db.auth_user.first_name,\n                                     db.auth_user.middle_name,\n                                     db.auth_user.last_name,\n                                     db.auth_user.email,\n                                     db.auth_user.obs,\n                                     db.auth_user.last_login,\n                                     db.auth_user.created_on],\n                             maxtextlengths={\'auth_user.email\': 50},\n                             showbuttontext=False,\n                             orderby=\'auth_user.last_name\',\n                             paginate=50,\n                             links_in_grid=False,\n                             exportclasses=dict(csv=True, csv_with_hidden_cols=False, json=False, tsv=False, tsv_with_hidden_cols=False, xml=True))\n    return locals()\n\n@auth.requires_membership(\'root\')\ndef admin_user_groups():\n    grid = SQLFORM.grid(db.auth_group,\n                        maxtextlengths={\'auth_group.description\': 50},\n                        showbuttontext=False,\n                        orderby=\'auth_group.role\',\n                        paginate=50,\n                        links_in_grid=False,\n                        exportclasses=dict(csv=True, csv_with_hidden_cols=False, json=False, tsv=False, tsv_with_hidden_cols=False, xml=True))\n    return locals()\n\n@auth.requires_membership(\'root\')\ndef admin_user_memberships():\n    grid = SQLFORM.smartgrid(db.auth_membership,\n                             maxtextlengths={\'auth_membership.user_id\': 50},\n                             showbuttontext=False,\n                             #orderby=db.auth_user.last_name,\n                             paginate=50,\n                             links_in_grid=False,\n                             exportclasses=dict(csv=True, csv_with_hidden_cols=False, json=False, tsv=False, tsv_with_hidden_cols=False, xml=True))\n    return locals()\n\n@auth.requires_membership(\'root\')\ndef admin_user_permissions():\n    grid = SQLFORM.smartgrid(db.auth_permission,\n                             maxtextlengths={\'auth_permission.name\': 50},\n                             showbuttontext=False,\n                             paginate=50,\n                             links_in_grid=False,\n                             exportclasses=dict(csv=True, csv_with_hidden_cols=False, json=False, tsv=False, tsv_with_hidden_cols=False, xml=True))\n    return locals()\n\n@auth.requires_membership(\'root\')\ndef upload_image():\n    grid = SQLFORM.smartgrid(db.images)\n    return locals()\n\n@auth.requires_permission(\'create new father\', db.auth_user)\ndef new_father():\n    form = SQLFORM.factory(db.auth_user, db.priority_father)\n    if form.process().accepted:\n        new_user_id = db.auth_user.insert(**db.auth_user._filter_fields(form.vars))\n        db.auth_membership.insert(user_id=new_user_id,\n                                  group_id=db.auth_group(role=\'padre\').id)\n        db.priority_father.insert(father_id=new_user_id, **db.priority_father._filter_fields(form.vars))\n        db.auth_user[new_user_id]=dict(created_on=request.now)\n        response.flash = T("new record inserted")\n        redirect(URL(\'start\'))\n    elif form.errors:\n        response.flash = T("Form has errors")\n    return dict(form=form)\n\n@auth.requires_permission(\'create new user\', db.auth_user)\ndef new_user():\n    #form = SQLFORM.factory(db.auth_user,\n    form = SQLFORM.factory(db.auth_user.first_name,\n                           db.auth_user.middle_name,\n                           db.auth_user.last_name,\n                           db.auth_user.gender,\n                           db.auth_user.email,\n                           db.auth_user.password,\n                           Field(\'password_check\', required=True, requires=[IS_EQUAL_TO(request.vars.password)], widget=SQLFORM.widgets.password.widget, label=T("Password Verification")),\n                           Field(\'role\', required=True, requires=IS_IN_DB(db, \'auth_group.role\', \'%(description)s\'), notnull=True, label=T("Role")),\n                           db.auth_user.obs\n                          )\n\n    if form.process().accepted:\n        ## After proccessing the form, we insert the data in the \'auth_user\' table.\n        new_user_id = db.auth_user.insert(**db.auth_user._filter_fields(form.vars))\n        ## And then we insert the membership of the new user.\n        db.auth_membership.insert(user_id=new_user_id,\n                                  group_id=db.auth_group(role=form.vars.role).id)\n        ## We set the \'created_on\' field to the current datetime.\n        db.auth_user[new_user_id]=dict(created_on=request.now)\n        response.flash = T("new record inserted")\n        redirect(URL(\'start\'))\n    elif form.errors:\n        response.flash = T("Form has errors")\n    return dict(form=form)\n\ndef new_personal_data():\n    username = auth.user.last_name + ", " + auth.user.first_name + " " + auth.user.middle_name\n    form = SQLFORM.factory(db.auth_user.first_name,\n                           auth.user.first_name,\n                           db.auth_user.middle_name,\n                           db.auth_user.last_name,\n                           db.auth_user.email,\n                           db.auth_user.gender,\n                           db.personal_data.doc_type,\n                           db.personal_data.doc,\n                           db.personal_data.nac,\n                           db.personal_data.cuil,\n                           db.personal_data.mail2,\n                           db.personal_data.tel1_type,\n                           db.personal_data.tel1,\n                           db.personal_data.tel2_type,\n                           db.personal_data.tel2,\n                           db.address.street,\n                           db.address.building,\n                           db.address.floor,\n                           db.address.door,\n                           db.address.apartment,\n                           db.address.street1,\n                           db.address.street2,\n                           db.address.zip_code,\n                           db.address.loc,\n                           db.address.prov,\n                           db.personal_data.obs,\n                           db.personal_data.photo,\n                           db.personal_data.avatar,\n                           db.personal_data.twitter,\n                           db.personal_data.facebook,\n                           #Field(\'first_name\', required=True, notnull=True, label=T("First Name"), writable=False, default=auth.user.first_name),\n                           #Field(\'middle_name\', label=T("Middle Name"), writable=False, default=auth.user.middle_name),\n                           #Field(\'last_name\', required=True, notnull=True, label=T("Last Name"), writable=False, default=auth.user.last_name),\n                           #Field(\'mail1\', required=True, requires=IS_EMAIL(), notnull=True, label=T("Principal email"), writable=False, default=auth.user.email),\n                           #Field(\'doc_type\', required=True, requires=IS_IN_SET(doc_type_set), notnull=True, default=doc_type_set[0], label=T("Document Type")),\n                           #Field(\'doc\', \'string\', length=8, required=True, requires=IS_MATCH(\'\\d{8}\'), notnull=True, unique=True, label=T("Document"), comment=T("Insert only numbers without dots. i.e.: 12654897")),\n                           #Field(\'nac\', required=True, notnull=True, default="Argentina", label=T("Nacionality")),\n                           #Field(\'cuil\', \'string\', length=11, requires=IS_MATCH(\'\\d{11}\'), notnull=True, unique=True, label="CUIL"),\n                           #Field(\'mail2\', requires=IS_EMPTY_OR(IS_EMAIL()), label=T("Alternative email"), comment=T("Another contact mail")),\n                           #Field(\'tel1_type\', required=True, requires=IS_IN_SET(tel_type_set), notnull=True, default=tel_type_set[0], label=T("Principal Phone Type")),\n                           #Field(\'tel1\', length=8, required=True, requires=IS_MATCH(\'\\d{8}\'), notnull=True, label=T("Principal Phone Number")),\n                           #Field(\'tel2_type\', requires=IS_IN_SET(tel_type_set), default=tel_type_set[0], label=T("Alternative Phone Type")),\n                           #Field(\'tel2\', length=8, requires=IS_MATCH(\'\\d{8}\'), label=T("Alternative Phone Number")),\n                           #Field(\'street\', required=True, notnull=True, label=T("Street")),\n                           #Field(\'building\', \'integer\', label=T("Building")),\n                           #Field(\'floor\', label=T("Floor")),\n                           #Field(\'door\', label=T("Door")),\n                           #Field(\'apartment\', label=T("Apartment")),\n                           #Field(\'street1\', label=T("Street 1")),\n                           #Field(\'street2\', label=T("Street 2")),\n                           #Field(\'zip_code\', label=T("ZIP Code")),\n                           #Field(\'loc\', default=provinces[2], label=T("Locality")),\n                           #Field(\'prov\', requires=IS_IN_SET(provinces), default=provinces[2], label=T("Province")),\n                           #Field(\'obs\', \'text\', label=T("Observations")),\n                           #Field(\'photo\', \'upload\', requires=IS_EMPTY_OR(IS_IMAGE(extensions=valid_image_extensions, maxsize=photo_size)), label=T("Photo")),\n                           #Field(\'avatar\', \'upload\', requires=IS_EMPTY_OR(IS_IMAGE(extensions=valid_image_extensions, maxsize=avatar_size)), label=T("Avatar")),\n                           #Field(\'twitter\', requires=IS_EMPTY_OR(IS_URL()), label=T("Twitter Profile")),\n                           #Field(\'facebook\', requires=IS_EMPTY_OR(IS_URL()), label=T("Facebook Profile")),\n                           #Field(\'obs\', \'text\', label=T("Observations")),\n                          )\n    if form.process().accepted:\n        data_id = db.personal_data.insert(**db.personal_data._filter_fields(form.vars))\n        addr_id = db.address.insert(**db.address._filter_fields(form.vars))\n        db.auth_user[auth.user.id]=dict(personal_data_id=data_id, address_id=addr_id)\n        response.flash = T("Record inserted")\n    return dict(form=form, user=username)\n\n@auth.requires(auth.has_permission(\'view fathers list\', db.auth_user) or auth.has_permission(\'view users list\', db.auth_user))\ndef users_list():\n    form = SQLFORM.factory(Field(\'role\', requires=IS_IN_DB(db, \'auth_group.role\', \'%(description)s\'), label=T("Role")))\n    query = (db.auth_membership.group_id==db.auth_group.id)&(db.auth_membership.user_id==db.auth_user.id)&(db.auth_group.role==request.vars.role)\n    fields = [db.auth_user.id,\n              db.auth_user.first_name,\n              db.auth_user.middle_name,\n              db.auth_user.last_name,\n              db.auth_user.email,\n              db.auth_user.created_on,\n              db.auth_user.last_login,\n              db.auth_group.description]\n    #rows = db(query).select()\n    grid = SQLFORM.grid(query,\n                        fields=fields,\n                        maxtextlengths={\'auth_user.id\': 5,\n                                        \'auth_user.first_name\': 20,\n                                        \'auth_user.middle_name\': 20,\n                                        \'auth_user.last_name\': 20,\n                                        \'auth_user.email\': 50,\n                                        \'auth_user.created_on\': 20,\n                                        \'auth_user.last_login\': 20},\n                        create=False,\n                        deletable=False,\n                        details=False,\n                        editable=False,\n                        searchable=False,\n                        csv=False,\n                        paginate=50)\n    return dict(form=form, grid=grid)\n\nresponse._vars=response._caller(new_personal_data)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/leo/Dropbox/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/leo/Dropbox/web2py/applications/SEACAT_ingresos/controllers/default.py", line 305, in <module>\n  File "/home/leo/Dropbox/web2py/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/leo/Dropbox/web2py/applications/SEACAT_ingresos/controllers/default.py", line 236, in new_personal_data\n    db.personal_data.facebook,\n  File "/home/leo/Dropbox/web2py/gluon/sqlhtml.py", line 1633, in factory\n    return SQLFORM(DAL(None).define_table(table_name, *fields),\n  File "/home/leo/Dropbox/web2py/gluon/dal.py", line 8139, in define_table\n    table = self.lazy_define_table(tablename,*fields,**args)\n  File "/home/leo/Dropbox/web2py/gluon/dal.py", line 8156, in lazy_define_table\n    table = table_class(self, tablename, *fields, **args)\n  File "/home/leo/Dropbox/web2py/gluon/dal.py", line 8636, in __init__\n    \'define_table argument is not a Field or Table: %s\' % field)\nSyntaxError: define_table argument is not a Field or Table: Leandro\n'
p11
s.