(dp1
S'output'
p2
S'<type \'exceptions.RuntimeError\'> Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/leo/Dropbox/web2py/gluon/dal.py", line 7766, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/leo/Dropbox/web2py/gluon/dal.py", line 2798, in __init__\n    if do_connect: self.reconnect()\n  File "/home/leo/Dropbox/web2py/gluon/dal.py", line 647, in reconnect\n    self.connection = f()\n  File "/home/leo/Dropbox/web2py/gluon/dal.py", line 2796, in connector\n    return self.driver.connect(msg,**driver_args)\n  File "/home/leo/Dropbox/web2py/gluon/contrib/pg8000/dbapi.py", line 752, in connect\n    password=password, socket_timeout=socket_timeout, ssl=ssl)\n  File "/home/leo/Dropbox/web2py/gluon/contrib/pg8000/dbapi.py", line 483, in __init__\n    self.conn = interface.Connection(**kwargs)\n  File "/home/leo/Dropbox/web2py/gluon/contrib/pg8000/interface.py", line 537, in __init__\n    self.c.authenticate(user, password=password, database=database)\n  File "/home/leo/Dropbox/web2py/gluon/contrib/pg8000/protocol.py", line 1051, in authenticate\n    reader.handle_messages()\n  File "/home/leo/Dropbox/web2py/gluon/contrib/pg8000/protocol.py", line 911, in handle_messages\n    retval = handler(msg, *args, **kwargs)\n  File "/home/leo/Dropbox/web2py/gluon/contrib/pg8000/protocol.py", line 1064, in _func\n    reader.handle_messages()\n  File "/home/leo/Dropbox/web2py/gluon/contrib/pg8000/protocol.py", line 929, in handle_messages\n    raise exc\nProgrammingError: (\'FATAL\', \'3D000\', \'no existe la base de datos \\xc2\\xabseacat\\xc2\\xbb\')\n'
p3
sS'layer'
p4
S'/home/leo/Dropbox/web2py/applications/SEACAT_ingresos/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n\n#########################################################################\n## This scaffolding model makes your app work on Google App Engine too\n## File is released under public domain and you can use without limitations\n#########################################################################\n\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\n## be redirected to HTTPS, uncomment the line below:\n# request.requires_https()\n\nif SUSPEND_SERVICE:\n    message = "<html><body><h2>"\n    message += T("System is under maitenance, please come back later.")\n    message += "</h2><h3>"\n    message += T("Sorry for the inconvenience")\n    message += "</h3><p>"\n    message += str(NOW)\n    message += "</p></body></html>"\n    raise HTTP(503, message)\n\nif not request.env.web2py_runtime_gae:\n    ## if NOT running on Google App Engine use SQLite or other DB\n    #db = DAL(\'sqlite://storage.sqlite\',pool_size=1,check_reserved=[\'all\'])\n    ## To connect to a PostgreSQL DB: postgres://username:password@server/database\n    ## DBURI contains the string to configure de DB it\'s stored in 0.py\n    db = DAL(DBURI, check_reserved=[DB_ENGINE])\nelse:\n    ## connect to Google BigTable (optional \'google:datastore://namespace\')\n    db = DAL(\'google:datastore\')\n    ## store sessions and tickets there\n    session.connect(request, response, db=db)\n    ## or store session in Memcache, Redis, etc.\n    ## from gluon.contrib.memdb import MEMDB\n    ## from google.appengine.api.memcache import Client\n    ## session.connect(request, response, db = MEMDB(Client()))\n\n## by default give a view/generic.extension to all actions from localhost\n## none otherwise. a pattern can be \'controller/function.extension\'\nresponse.generic_patterns = [\'*\'] if request.is_local else []\n## (optional) optimize handling of static files\n# response.optimize_css = \'concat,minify,inline\'\n# response.optimize_js = \'concat,minify,inline\'\n\n#########################################################################\n## Here is sample code if you need for\n## - email capabilities\n## - authentication (registration, login, logout, ... )\n## - authorization (role based authorization)\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\n## - old style crud actions\n## (more options discussed in gluon/tools.py)\n#########################################################################\n\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\nauth = Auth(db)\ncrud, service, plugins = Crud(db), Service(), PluginManager()\n\n## Adding "last_login" and "obs" fields to \'auth_user\' table\nauth.settings.extra_fields[\'auth_user\'] = [\n                                           Field(\'middle_name\', label=T("Middle Name")),\n                                           # Falta agregar notnull...\n                                           Field(\'gender\', required=True, requires=IS_IN_SET(GENDER_LIST), label=T("Gender")),\n                                           Field(\'created_on\', \'datetime\', label=T("Created On"), writable=False, readable=True),\n                                           Field(\'last_login\', \'datetime\', label=T("Last Login"), writable=False, readable=True),\n                                           Field(\'obs\', \'text\', label=T("Observations")),\n                                           #Field(\'personal_data_id\', \'reference personal_data\', writable=False, readable=False, requires=IS_IN_DB(db, \'personal_data.id\'), label=T("Personal Data ID")),\n                                           #Field(\'address_id\', \'reference address\', writable=False, readable=False, requires=IS_IN_DB(db, \'address.id\'), label=T("Address ID"))\n                                           ]\n## create all tables needed by auth if not custom tables\nauth.define_tables(username=False, signature=True)\n\n## Changing format to \'auth_user\' table:\ndb.auth_user._format = \'%(last_name)s\'+", "+\'%(first_name)s\'+" "+\'%(middle_name)s\'\n\n## Settings for \'first_name\' field:\ndb.auth_user.first_name.required=True\ndb.auth_user.first_name.requires=IS_NOT_EMPTY()\n\n## Settings for \'last_name\' field:\ndb.auth_user.last_name.required=True\ndb.auth_user.last_name.requires=IS_NOT_EMPTY()\n\n## Setting email to unique\ndb.auth_user.email.requires = [IS_EMAIL(), IS_NOT_IN_DB(db, \'auth_user.email\')]\ndb.auth_user.email.unique=True\ndb.auth_user.email.error_message=T("This email is already in our database, please choose another one")\n\n## Changing attributes:\ndb.auth_group.description.readable = True\n\n## Removing "remember me" feature at login form\nauth.settings.remember_me_form = False\n\n## Defining new table for Images:\ndb.define_table(\'images\',\n                Field(\'name\', label=T("Name")),\n                Field(\'file\', \'upload\', label=T("File"), required=True),\n                auth.signature\n                )\n\n## Defining new table for address:\ndb.define_table(\'address\',\n                Field(\'uid\', \'reference auth_user\', writable=False, readable=False, requires=IS_IN_DB(db, \'auth_user.id\'), label=T("User ID")),\n                Field(\'street\', required=True, notnull=True, label=T("Street")),\n                Field(\'building\', \'integer\', label=T("Building")),\n                Field(\'floor\', label=T("Floor")),\n                Field(\'door\', label=T("Door")),\n                Field(\'apartment\', label=T("Apartment")),\n                Field(\'street1\', label=T("Street 1")),\n                Field(\'street2\', label=T("Street 2")),\n                Field(\'zip_code\', label=T("ZIP Code")),\n                Field(\'loc\', default=PROVINCES_LIST[2], label=T("Locality")),\n                Field(\'prov\', requires=IS_IN_SET(PROVINCES_LIST), default=PROVINCES_LIST[2], label=T("Province")),\n                Field(\'obs\', \'text\', label=T("Observations")),\n                auth.signature,\n                format=\'%(street)s\'+" "+\'%(building)s\'+" "+\'%(floor)s\'+" "+\'%(door)s\'+" "+\'%(apartment)s\'\n                )\n\n## Defining new table for personal data\ndb.define_table(\'personal_data\',\n                Field(\'uid\', \'reference auth_user\', writable=False, readable=False, requires=IS_IN_DB(db, \'auht_user.id\'), label=T("User ID")),\n                Field(\'doc_type\', required=True, requires=IS_IN_SET(DOC_TYPE_SET), notnull=True, default=DOC_TYPE_SET[0], label=T("Document Type")),\n                Field(\'doc\', \'string\', length=8, required=True, requires=IS_MATCH(\'\\d{8}\'), notnull=True, unique=True, label=T("Document"), comment=T("Insert only numbers without dots. i.e.: 12654897")),\n                Field(\'nac\', required=True, notnull=True, default="Argentina", label=T("Nacionality")),\n                Field(\'cuil\', \'string\', length=11, requires=IS_MATCH(\'\\d{11}\'), notnull=True, unique=True, label="CUIL"),\n                Field(\'dob\', \'date\', required=True, requires=IS_DATE(format=(\'%d-%m-%Y\')), notnull=True, label=T("Day of Birth")),\n                ## Commented because they are in \'auth_user\' table:\n                #Field(\'first_name\', required=True, notnull=True, label=T("First Name")),\n                #Field(\'middle_name\', label=T("Middle Name")),\n                #Field(\'last_name\', required=True, notnull=True, label=T("Last Name")),\n                #Field(\'mail1\', required=True, requires=IS_EMAIL(), notnull=True, label=T("email 1")),\n                Field(\'mail2\', requires=IS_EMPTY_OR(IS_EMAIL()), label=T("Alternative email"), comment=T("Another contact mail")),\n                Field(\'tel1_type\', required=True, requires=IS_IN_SET(TEL_TYPE_SET), notnull=True, default=TEL_TYPE_SET[0], label=T("Principal Phone Type")),\n                Field(\'tel1\', length=8, required=True, requires=IS_MATCH(\'\\d{8}\'), notnull=True, label=T("Principal Phone Number")),\n                Field(\'tel2_type\', requires=IS_IN_SET(TEL_TYPE_SET), default=TEL_TYPE_SET[0], label=T("Alternative Phone Type")),\n                Field(\'tel2\', length=8, requires=IS_MATCH(\'\\d{8}\'), label=T("Alternative Phone Number")),\n                Field(\'photo\', \'upload\', requires=IS_EMPTY_OR(IS_IMAGE(extensions=VALID_IMG_EXTENSION_SET, maxsize=MAX_PHOTO_SIZE)), label=T("Photo")),\n                Field(\'avatar\', \'upload\', requires=IS_EMPTY_OR(IS_IMAGE(extensions=VALID_IMG_EXTENSION_SET, maxsize=MAX_AVATAR_SIZE)), label=T("Avatar")),\n                Field(\'twitter\', requires=IS_EMPTY_OR(IS_URL()), label=T("Twitter Profile")),\n                Field(\'facebook\', requires=IS_EMPTY_OR(IS_URL()), label=T("Facebook Profile")),\n                Field(\'obs\', \'text\', label=T("Observations")),\n                auth.signature,\n                format=\'%(doc)s\'\n                )\n#db.personal_data.age = Field.Virtual(lambda row: (request.now-row.personal_data.dob).years)\n\n## Defining new table for Fathers.\ndb.define_table(\'father\',\n                Field(\'father_id\', \'reference auth_user\', writable=False, readable=False, requires=IS_IN_DB(db, \'auth_user.id\'), label=T("Father ID")),\n                Field(\'children_in_school\', \'boolean\', label=T("Do you have children in our school?")),\n                Field(\'children_name\', label=T("Children name")),\n                Field(\'student_network\', \'boolean\', label=T("Does your son goes to a school in our network?")),\n                Field(\'student_school\', requires=IS_EMPTY_OR(IS_IN_SET(SCHOOL_NETWORK_LIST)), label=T("Choose your school")),\n                auth.signature,\n                format=\'%(db.auth_user.last_name)s\'+\', \'+\'%(db.auth_user.first_name)s\'+\' \'+\'%(db.auth_user.middle_name)s\'\n               )\n\n\nif FIRST_DEPLOYMENT:\n    ## Adding Groups in FIRST_DEPLOYMENT:\n    db.auth_group.insert(role=\'root\', description=\'Superadministrador\')\n    db.auth_group.insert(role=\'empleado\', description=\'Empleado de la Casa\')\n    db.auth_group.insert(role=\'soporte\', description=\'Soporte T\xc3\xa9cnico\')\n    db.auth_group.insert(role=\'directivo\', description=\'Directivo\')\n    db.auth_group.insert(role=\'director\', description=\'Director General\')\n    db.auth_group.insert(role=\'rector\', description=\'Rector del Colegio\')\n    db.auth_group.insert(role=\'secretaria\', description=\'Secretar\xc3\xada\')\n    db.auth_group.insert(role=\'secretario\', description=\'Secretario\')\n    db.auth_group.insert(role=\'derivaciones\', description=\'Oficina de Derivaciones\')\n    db.auth_group.insert(role=\'eoe\', description=\'Equipo de Orientaci\xc3\xb3n Escolar\')\n    db.auth_group.insert(role=\'administracion\', description=\'Administraci\xc3\xb3n\')\n    db.auth_group.insert(role=\'administrador\', description=\'Administrador\')\n    db.auth_group.insert(role=\'caja\', description=\'Caja\')\n    db.auth_group.insert(role=\'padre\', description=\'Padre o Madre\')\n    db.auth_group.insert(role=\'candidato\', description=\'Ingresante\')\n\n    ## Adding permission in FIRST_DEPLOYMENT:\n    auth.add_permission(db.auth_group(role=\'root\').id, \'create\', db.auth_user, 0)\n    auth.add_permission(db.auth_group(role=\'root\').id, \'view\', db.auth_user, 0)\n    auth.add_permission(db.auth_group(role="derivaciones").id, \'create new father\', db.auth_user, 0)\n    auth.add_permission(db.auth_group(role="derivaciones").id, \'view fathers list\', db.auth_user, 0)\n\n\n## configure email\nmail = auth.settings.mailer\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'\nmail.settings.sender = \'soportetecnico@pioix.edu.ar\'\nmail.settings.login = \'soportetecnico:deagostini\'\n\n## configure auth policy\nauth.settings.registration_requires_verification = True\nauth.settings.registration_requires_approval = True\nauth.settings.reset_password_requires_verification = True\n\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\n## register with janrain.com, write your domain:api_key in private/janrain.key\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\nuse_janrain(auth, filename=\'private/janrain.key\')\n\n#########################################################################\n## Define your tables below (or better in another model file) for example\n##\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\n##\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\n## There is an implicit \'id integer autoincrement\' field\n## Consult manual for more options, validators, etc.\n##\n## More API examples for controllers:\n##\n## >>> db.mytable.insert(myfield=\'value\')\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\n## >>> for row in rows: print row.id, row.myfield\n#########################################################################\n\n## after defining tables, uncomment below to enable auditing\n# auth.enable_record_versioning(db)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/leo/Dropbox/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/leo/Dropbox/web2py/applications/SEACAT_ingresos/models/db.py", line 27, in <module>\n    db = DAL(DBURI, check_reserved=[DB_ENGINE])\n  File "/home/leo/Dropbox/web2py/gluon/dal.py", line 7787, in __init__\n    raise RuntimeError("Failure to connect, tried %d times:\\n%s" % (attempts, tb))\nRuntimeError: Failure to connect, tried 5 times:\nTraceback (most recent call last):\n  File "/home/leo/Dropbox/web2py/gluon/dal.py", line 7766, in __init__\n    self._adapter = ADAPTERS[self._dbname](**kwargs)\n  File "/home/leo/Dropbox/web2py/gluon/dal.py", line 2798, in __init__\n    if do_connect: self.reconnect()\n  File "/home/leo/Dropbox/web2py/gluon/dal.py", line 647, in reconnect\n    self.connection = f()\n  File "/home/leo/Dropbox/web2py/gluon/dal.py", line 2796, in connector\n    return self.driver.connect(msg,**driver_args)\n  File "/home/leo/Dropbox/web2py/gluon/contrib/pg8000/dbapi.py", line 752, in connect\n    password=password, socket_timeout=socket_timeout, ssl=ssl)\n  File "/home/leo/Dropbox/web2py/gluon/contrib/pg8000/dbapi.py", line 483, in __init__\n    self.conn = interface.Connection(**kwargs)\n  File "/home/leo/Dropbox/web2py/gluon/contrib/pg8000/interface.py", line 537, in __init__\n    self.c.authenticate(user, password=password, database=database)\n  File "/home/leo/Dropbox/web2py/gluon/contrib/pg8000/protocol.py", line 1051, in authenticate\n    reader.handle_messages()\n  File "/home/leo/Dropbox/web2py/gluon/contrib/pg8000/protocol.py", line 911, in handle_messages\n    retval = handler(msg, *args, **kwargs)\n  File "/home/leo/Dropbox/web2py/gluon/contrib/pg8000/protocol.py", line 1064, in _func\n    reader.handle_messages()\n  File "/home/leo/Dropbox/web2py/gluon/contrib/pg8000/protocol.py", line 929, in handle_messages\n    raise exc\nProgrammingError: (\'FATAL\', \'3D000\', \'no existe la base de datos \\xc2\\xabseacat\\xc2\\xbb\')\n\n'
p11
s.